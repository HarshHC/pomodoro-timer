{"version":3,"sources":["Constants/themes.js","components/Header/ImageSearchDrawer.js","components/Header/BackgroundOptions.js","components/Header/ColourSelector.js","components/Header/ThemeDrawer.js","components/Header/index.js","components/Tasks/TodoForm.js","components/Tasks/TodoItem.js","components/Tasks/TodoList.js","components/Tasks/index.js","Constants/modes.js","components/Timer/RunningTimer.js","components/Timer/utilities.js","components/Timer/MinSetter.js","components/Timer/TimerEditMode.js","components/Timer/index.js","App.js","reportWebVitals.js","index.js"],"names":["generateGradientTheme","color","colorMode","bg","image","random","custom_url","name","theme","startColor","darkColor1","lightColor1","endColor","darkColor2","lightColor2","bgImage","bgInfo","location","random_url","styles","textColor","_hover","hover","bgGradient","reverse","bgNoHover","imageModeContrastText","textShadow","imageModeContrastBg","saveThemeToStorage","newTheme","window","localStorage","setItem","JSON","stringify","PURPLE","baseColor","themesList","ImageSearchDrawer","props","useState","searchInput","setSearchInput","photosResponse","setPhotosResponse","searchClicked","setSearchClicked","useMediaQuery","isOnmobile","toast","useToast","config","unsplash","createApi","accessKey","process","REACT_APP_API_KEY","searchUnsplash","searchFor","search","getPhotos","query","orientation","per_page","then","result","catch","useEffect","isOpen","images","m","w","h","response","flexWrap","flexDir","results","map","photo","borderRadius","src","urls","regular","alt","alt_description","onClick","oldTheme","url","setGradientThemeImageCustomUrl","setTheme","title","description","status","duration","id","onClose","size","placement","justify","align","ml","fontWeight","fontSize","href","isExternal","variant","mr","onSubmit","e","preventDefault","mx","pr","value","onChange","target","borderRight","placeholder","type","minW","leftIcon","Search2","BackgroundOptions","useDisclosure","onOpen","flex","my","width","colorScheme","isChecked","toggleBackgroundImageInGradientTheme","toggleRandomImageInGradientTheme","ColourSelector","mt","maxW","item","i","label","toUpperCase","rounded","changeGradientThemeColorTo","uuid","ThemeDrawer","finalFocusRef","btnRef","Header","useColorMode","toggleColorMode","React","useRef","p","icon","Moon","Sun","fill","Settings","TodoForm","edit","input","setInput","taskOption","spacing","border","borderColor","_placeholder","as","py","textAlign","borderLeft","className","Math","floor","text","columnID","TodoItem","updateMode","setUpdateMode","todo","inputRef","current","focus","updateTodoMode","provided","draggableProps","dragHandleProps","ref","innerRef","key","index","overflow","updateTodo","Check","boxSize","defaultTodoMode","Delete","removeTodo","Edit","TodoList","setEdit","todos","draggableId","Tasks","newTasks","completedTasks","setTodos","newValue","test","newTodos","items","splice","desktopTodos","onDragEnd","destination","start","source","droppableId","finish","reorder","sourceList","removed","destinationList","justifyContent","flexDirection","droppableProps","minH","SESSION","BREAK","RunningTimer","seconds","setSeconds","mode","sessionMins","breakMins","mins","setMins","timeProps","getItem","parse","updatedTime","setUpdatedTime","time","timerProps","setMode","started","isRunning","startTimer","startingMins","setInterval","interval","clearInterval","height","alignItems","centerContent","bgClip","validateMins","setSessionMins","maxSessionMins","isClosable","MinSetter","direction","Button","maxVal","Add","defaultValue","defaultMins","val","parseInt","Number","isNaN","Minus","TimerEditMode","maxBreakMins","setBreakMins","Timer","displayedTimer","setStarted","setIsRunning","timerProp","boxShadow","App","timerTheme","setTimerTheme","storedTheme","Notification","requestPermission","content","noBgImage","withBgRandomImage","_before","bgAttachment","bgSize","bgRepeat","left","position","top","willChange","zIndex","withBgCustomImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","extendTheme","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZAAaA,EAAwB,SACnCC,EACAC,GAGI,IAFJC,EAEG,uDAFE,CAAEC,OAAO,EAAOC,QAAQ,EAAMC,WAAY,IAC/CC,EACG,uDADI,GAEDC,EAAQ,CACZP,QACAC,YACAK,KAAe,KAATA,EAAcN,EAAMM,KAAOA,EACjCE,WAA0B,SAAdP,EAAuBD,EAAMS,WAAaT,EAAMU,YAC5DC,SAAwB,SAAdV,EAAuBD,EAAMY,WAAaZ,EAAMa,YAC1DC,QAASZ,EAAGC,MACZY,OAAQ,CACNC,SAAU,SACVC,WAAW,4DAAD,OAA8DjB,EAAMM,MAC9ED,WAAYH,EAAGG,WACfD,OAAqB,MAAbF,EAAGE,QAAiBF,EAAGE,QAEjCc,OAAQ,CACNhB,GAAI,CACFF,MAAOA,EAAMmB,UACbC,OAAQ,CAAElB,GAAIF,EAAMqB,OACpBC,WACgB,UAAdrB,EAAA,uBACoBD,EAAMU,YAD1B,YACyCV,EAAMa,YAD/C,4BAEoBb,EAAMS,WAF1B,YAEwCT,EAAMY,WAF9C,KAGFW,QAAS,CACPvB,MAAOA,EAAMmB,UACbC,OAAQ,CAAElB,GAAIF,EAAMqB,OACpBC,WACgB,UAAdrB,EAAA,sBACmBD,EAAMU,YADzB,YACwCV,EAAMa,YAD9C,2BAEmBb,EAAMS,WAFzB,YAEuCT,EAAMY,WAF7C,OAKNY,UAAW,CACTxB,MAAOA,EAAMmB,UACbG,WACgB,UAAdrB,EAAA,uBACoBD,EAAMU,YAD1B,YACyCV,EAAMa,YAD/C,4BAEoBb,EAAMS,WAF1B,YAEwCT,EAAMY,WAF9C,MAIJa,sBACgB,SAAdxB,EACI,CACEyB,WACE,gEAEJ,CACEA,WACE,gEAEVC,oBACgB,SAAd1B,EACI,CACEC,GAAI,sBAEN,CACEA,GAAI,8BAIhB,OAAOK,GAGIqB,EAAqB,SAAAC,GAChCC,OAAOC,aAAaC,QAAQ,cAAeC,KAAKC,UAAUL,KAsD/CM,EAAS,CACpB7B,KAAM,SACN8B,UAAW,UACX1B,YAAa,UACbG,YAAa,UACbJ,WAAY,UACZG,WAAY,UACZS,MAAO,UACPF,UAAW,SA+CAkB,EAAa,CAlEN,CAClB/B,KAAM,OACN8B,UAAW,WACX1B,YAAa,UACbG,YAAa,UACbJ,WAAY,UACZG,WAAY,UACZS,MAAO,WACPF,UAAW,SA0DoBgB,EA5CX,CACpB7B,KAAM,SACN8B,UAAW,aACX1B,YAAa,UACbG,YAAa,UACbJ,WAAY,UACZG,WAAY,UACZS,MAAO,UACPF,UAAW,SAGM,CACjBb,KAAM,MACN8B,UAAW,UACX1B,YAAa,UACbG,YAAa,UACbJ,WAAY,UACZG,WAAY,UACZS,MAAO,UACPF,UAAW,SAGQ,CACnBb,KAAM,QACN8B,UAAW,OACX1B,YAAa,UACbG,YAAa,UACbJ,WAAY,UACZG,WAAY,UACZS,MAAO,OACPF,UAAW,SAGS,CACpBb,KAAM,SACN8B,UAAW,SACX1B,YAAa,UACbG,YAAa,UACbJ,WAAY,UACZG,WAAY,UACZS,MAAO,UACPF,UAAW,U,sECDEmB,MArJf,SAA2BC,GAAQ,IAAD,EACMC,mBAAS,qBADf,mBACzBC,EADyB,KACZC,EADY,OAEYF,mBAAS,MAFrB,mBAEzBG,EAFyB,KAETC,EAFS,OAGUJ,oBAAS,GAHnB,mBAGzBK,EAHyB,KAGVC,EAHU,OAIXC,YAAc,sBAA5BC,EAJyB,oBAK1BC,EAAQC,cAEdC,mBAEA,IAAMC,EAAWC,YAAU,CACzBC,UAAWC,kJAAYC,oBAGnBC,EAAiB,SAAAC,GACrBN,EAASO,OACNC,UAAU,CACTC,MAAOH,EACPI,YAAad,EAAa,WAAa,YACvCe,SAAU,KAEXC,MAAK,SAAAC,GACU,MAAVA,GACFrB,EAAkBqB,MAIrBC,OAAM,gBAIXC,qBAAU,YACH5B,EAAMhC,MAAMQ,OAAOX,QAAUmC,EAAMhC,MAAMO,SAAWyB,EAAM6B,QAC7DX,EAAe,uBAEhB,CAAClB,EAAMhC,MAAMQ,OAAOX,OAAQmC,EAAMhC,MAAMO,QAASyB,EAAM6B,SAE1D,IAIIC,EACF,cAAC,IAAD,UACGxB,EACC,cAAC,IAAD,CAAUyB,EAAE,IAAIC,EAAE,OAAOC,EAAE,SAE3B,cAAC,IAAD,CAAMF,EAAE,IAAIC,EAAE,OAAOC,EAAE,WAoC7B,OAhCsB,MAAlB7B,GAAqD,MAA3BA,EAAe8B,WAC3CJ,EACE,cAAC,IAAD,CAAMC,EAAE,IAAIC,EAAE,OAAOC,EAAE,MAAME,SAAS,OAAOC,QAAQ,MAArD,SACGhC,EAAe8B,SAASG,QAAQC,KAAI,SAAAC,GAAK,OACxC,cAAC,IAAD,CAAoBR,EAAE,IAAIC,EAAGvB,EAAa,MAAQ,MAAlD,SACE,cAAC,IAAD,CACEuB,EAAE,OACFC,EAAGxB,EAAa,QAAU,QAC1B+B,aAAa,MACbC,IAAKF,EAAMG,KAAKC,QAChBC,IAAKL,EAAMM,gBACXC,QAAS,WACP,IAAMxD,EDgBwB,SAACyD,EAAUC,GACvD,IAAM1D,EAAW9B,EAAsBuF,EAAStF,MAAOsF,EAASrF,UAAW,CACzEE,MAAOmF,EAASxE,QAChBV,OAAQkF,EAASvE,OAAOX,OACxBC,WAAYkF,IAGd,OADA3D,EAAmBC,GACZA,ECvBwB2D,CACfjD,EAAMhC,MACNuE,EAAMG,KAAKC,SAEb3C,EAAMkD,SAAS5D,GACfoB,EAAM,CACJyC,MAAO,sBACPC,YACE,oDACFC,OAAQ,UACRC,SAAU,UAlBRf,EAAMgB,UA6BtB,cAAC,IAAD,CACEC,QAASxD,EAAMwD,QACf3B,OAAQ7B,EAAM6B,OACd4B,KAAMhD,EAAa,KAAO,KAC1BiD,UAAU,QAJZ,SAKE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAMC,QAAQ,gBAAgB3B,EAAE,OAAO4B,MAAM,SAA7C,UACE,eAAC,IAAD,CAAMxB,QAAQ,SAAd,UACE,cAAC,IAAD,CAAMyB,GAAG,IAAIC,WAAW,OAAxB,qCAGA,eAAC,IAAD,CAAMD,GAAG,IAAIE,SAAS,KAAtB,wBACc,IACZ,cAAC,IAAD,CACEtG,MAAM,WACNuG,KAAK,2BACLC,YAAU,EAHZ,gCAQJ,cAAC,IAAD,CAAQC,QAAQ,UAAUC,GAAG,IAAIrB,QAAS9C,EAAMwD,QAAhD,uBAKJ,eAAC,IAAD,WACE,sBACEY,SAAU,SAAAC,GACRA,EAAEC,iBA5EdpD,EAAehB,IA0EP,SAKE,eAAC,IAAD,CAAMqE,GAAG,IAAIvC,EAAE,MAAf,UACE,cAAC,IAAD,CACEA,EAAE,OACFwC,GAAG,MACHC,MAAOvE,EACPwE,SAAU,SAAAL,GACRlE,EAAekE,EAAEM,OAAOF,QAE1BP,QAAQ,UACRU,YAAY,MACZpC,aAAa,kBACbqC,YAAY,kBAEd,cAAC,IAAD,CACEpB,KAAK,KACLqB,KAAK,SACLC,KAAK,cACLvC,aAAa,kBACbwC,SAAU,cAACC,EAAA,EAAD,IACVnC,QAAS,kBAAMvC,GAAiB,IANlC,yBAYHuB,aCzFEoD,MAlEf,SAA2BlF,GAAQ,IAAD,EACImF,cAA5BtD,EADwB,EACxBA,OAAQuD,EADgB,EAChBA,OAAQ5B,EADQ,EACRA,QAExB,OACE,eAAC,IAAD,CAAMpB,QAAQ,SAASiD,KAAK,IAAIC,GAAG,IAAnC,UACE,cAAC,IAAD,CAAMzB,GAAG,IAAIC,WAAW,MAAxB,wBAGA,eAAC,IAAD,CAAM/B,EAAE,IAAIK,QAAQ,SAApB,UACE,eAAC,IAAD,CAAML,EAAE,IAAIC,EAAE,MAAM2B,QAAQ,gBAA5B,UACE,cAAC,IAAD,CAAM4B,MAAM,MAAMpB,GAAG,IAArB,8BAGA,cAAC,IAAD,CACEV,KAAK,KACL+B,YAAaxF,EAAMhC,MAAMD,KACzB0H,UAAWzF,EAAMhC,MAAMO,QACvBmG,SAAU,WACR,IAAMpF,EFqDgC,SAAAyD,GAClD,IAAMzD,EAAW9B,EAAsBuF,EAAStF,MAAOsF,EAASrF,UAAW,CACzEE,OAAQmF,EAASxE,QACjBV,OAAQkF,EAASvE,OAAOX,OACxBC,WAAYiF,EAASvE,OAAOV,aAG9B,OADAuB,EAAmBC,GACZA,EE5DsBoG,CACf1F,EAAMhC,OAERgC,EAAMkD,SAAS5D,SAIpBU,EAAMhC,MAAMO,QACX,eAAC,IAAD,CAAMwD,EAAE,IAAIC,EAAE,MAAM2B,QAAQ,gBAA5B,UACE,cAAC,IAAD,CAAM4B,MAAM,MAAMpB,GAAG,IAArB,0BAGA,cAAC,IAAD,CACEV,KAAK,KACL+B,YAAaxF,EAAMhC,MAAMD,KACzB0H,UAAWzF,EAAMhC,MAAMQ,OAAOX,OAC9B6G,SAAU,WACR,IAAMpF,EF8C0B,SAAAyD,GAC9C,IAAMzD,EAAW9B,EAAsBuF,EAAStF,MAAOsF,EAASrF,UAAW,CACzEE,MAAOmF,EAASxE,QAChBV,QAASkF,EAASvE,OAAOX,OACzBC,WAAYiF,EAASvE,OAAOV,aAG9B,OADAuB,EAAmBC,GACZA,EErDwBqG,CAAiC3F,EAAMhC,OACxDgC,EAAMkD,SAAS5D,SAKrB,yBAEAU,EAAMhC,MAAMQ,OAAOX,QAAUmC,EAAMhC,MAAMO,QACzC,cAAC,IAAD,CACE+G,GAAG,IACHP,KAAK,cACL/C,EAAE,MACFgD,SAAU,cAACC,EAAA,EAAD,IACVnC,QAAS,kBAAMsC,KALjB,wBASA,2BAGJ,cAAC,EAAD,CACEvD,OAAQA,EACR2B,QAASA,EACTxF,MAAOgC,EAAMhC,MACbkF,SAAUlD,EAAMkD,e,0BCnCT0C,MA7Bf,SAAwB5F,GACtB,OACE,eAAC,IAAD,CAAMoC,QAAQ,SAASiD,KAAK,IAA5B,UACE,cAAC,IAAD,CAAMxB,GAAG,IAAIC,WAAW,MAAxB,qBAGA,cAAC,IAAD,CAAM+B,GAAG,IAAIC,KAAK,OAAO3D,SAAS,OAAlC,SACGrC,EAAWwC,KAAI,SAACyD,EAAMC,GACrB,OACE,cAAC,IAAD,CAASC,MAAOF,EAAKhI,KAAKmI,cAA1B,SACE,cAAC,IAAD,CACEnE,EAAE,IACF0B,KAAK,KACL9F,GAAIoI,EAAKlG,UACTsG,QAAQ,KACRrD,QAAS,WACP9C,EAAMkD,SHiDkB,SAACH,EAAUtF,GACnD,IAAM6B,EAAW9B,EAAsBC,EAAOsF,EAASrF,UAAW,CAChEE,MAAOmF,EAASxE,QAChBV,OAAQkF,EAASvE,OAAOX,OACxBC,WAAYiF,EAASvE,OAAOV,aAG9B,OADAuB,EAAmBC,GACZA,EGvDW8G,CAA2BpG,EAAMhC,MAAO8B,EAAWkG,SARbK,gBCuC3CC,MArCf,SAAqBtG,GACnB,OACE,cAAC,IAAD,CACE6B,OAAQ7B,EAAM6B,OACd6B,UAAU,QACVF,QAASxD,EAAMwD,QACf+C,cAAevG,EAAMwG,OAJvB,SAKE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAM3C,GAAG,IAAIC,WAAW,MAAxB,+BAKF,cAAC,IAAD,UACE,eAAC,IAAD,CAAM1B,QAAQ,SAAd,UACE,cAAC,EAAD,CAAgBpE,MAAOgC,EAAMhC,MAAOkF,SAAUlD,EAAMkD,WACpD,cAAC,EAAD,CACElF,MAAOgC,EAAMhC,MACbkF,SAAUlD,EAAMkD,gBAKtB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQgB,QAAQ,UAAUC,GAAI,EAAGrB,QAAS9C,EAAMwD,QAAhD,6BC2BGiD,MA1Df,SAAgBzG,GAAQ,IAAD,EACkB0G,cAA/BhJ,EADa,EACbA,UAAWiJ,EADE,EACFA,gBADE,EAEexB,cAA5BtD,EAFa,EAEbA,OAAQuD,EAFK,EAELA,OAAQ5B,EAFH,EAEGA,QAClBgD,EAASI,IAAMC,SAErB,OACE,qCACE,eAAC,IAAD,CAAMlD,QAAQ,SAASC,MAAM,SAASkD,EAAE,IAAI/E,EAAE,IAA9C,UACE,cAAC,IAAD,yBACEtE,MAAqB,UAAdC,EAAwB,QAAU,SACpCsC,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOO,sBACnB,IAJN,IAKEqF,GAAG,OALL,6BAQA,cAAC,IAAD,yBACE9G,MAAqB,UAAdC,EAAwB,QAAU,QACzCqJ,KAAoB,UAAdrJ,EAAwB,cAACsJ,EAAA,EAAD,IAAe,cAACC,EAAA,EAAD,KACxCjH,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOS,oBACnB,IALN,IAME0D,QAAS6D,EACTpC,GAAG,OACH2C,KAAK,SAEP,cAAC,IAAD,yBACEzJ,MAAqB,UAAdC,EAAwB,QAAU,QACzCqJ,KAAM,cAAC,IAAD,KACD/G,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOS,oBACnB,IALN,IAME0D,QAASsC,EACTb,GAAG,OACH2C,KAAK,SAEP,cAAC,IAAD,yBACEzJ,MAAqB,UAAdC,EAAwB,QAAU,QACzCqJ,KAAM,cAACI,EAAA,EAAD,KACDnH,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOS,oBACnB,IALN,IAME0D,QAASsC,EACTb,GAAG,OACH2C,KAAK,YAGT,cAAC,EAAD,CACErF,OAAQA,EACR2B,QAASA,EACTgD,OAAQA,EACRxI,MAAOgC,EAAMhC,MACbkF,SAAUlD,EAAMkD,e,yBCKTkE,MAlEf,SAAkBpH,GAAQ,IAAD,EACGC,mBAASD,EAAMqH,KAAOrH,EAAMqH,KAAK5C,MAAQ,IAD5C,mBAChB6C,EADgB,KACTC,EADS,OAEF/G,YAAc,sBAA5BC,EAFgB,oBAoBjB+G,EACJ,eAAC,IAAD,CAAQC,QAAQ,MAAMzF,EAAGvB,EAAa,OAAS,OAA/C,UACE,cAAC,IAAD,2BACMT,EAAMhC,MAAMW,OAAOM,WADzB,IAEEtB,GAAG,cACH+J,OAAO,MACPlF,aAAa,cACbsE,EAAE,sBACFa,YAAa3H,EAAMhC,MAAMC,WACzBR,MAAiC,UAA1BuC,EAAMhC,MAAMN,UAAwB,QAAU,QACrDkK,aAAY,aACVnK,MAAiC,UAA1BuC,EAAMhC,MAAMN,UAAwB,QAAU,SACjDsC,EAAMhC,MAAMO,QACZyB,EAAMhC,MAAMW,OAAOO,sBACnB,IAEN8C,EAAE,MACF6F,GAAG,QACHvC,GAAG,OACHT,YAAY,WACZJ,MAAO6C,EACP5C,SArCe,SAAAL,GACnBkD,EAASlD,EAAEM,OAAOF,WAsChB,cAAC,IAAD,yBACEoD,GAAG,SACH/C,KAAK,SACLjB,GAAG,MACH7B,EAAE,MACF0F,OAAO,MACPI,GAAG,OACHtF,aAAa,cACbuF,UAAU,UACN/H,EAAMhC,MAAMW,OAAOhB,IATzB,IAUEgK,YAAa3H,EAAMhC,MAAMC,WACzB+J,WAAW,MAXb,0BAgBJ,OACE,sBAAMC,UAAU,YAAY7D,SApDT,SAAAC,GACnBA,EAAEC,iBAEFtE,EAAMoE,SAAS,CACbb,GAAI2E,KAAKC,MAAsB,IAAhBD,KAAKrK,UACpBuK,KAAMd,EACNe,SAAU,QAGZd,EAAS,MA2CT,SACGC,K,8BC2DQc,OAvHf,SAAkBtI,GAAQ,IAAD,EACaC,oBAAS,GADtB,mBAChBsI,EADgB,KACJC,EADI,OAEGvI,mBAASD,EAAMyI,KAAKL,MAFvB,mBAEhBd,EAFgB,KAETC,EAFS,OAGF/G,YAAc,sBAA5BC,EAHgB,oBAKjBiI,EAAW7B,iBAAO,MAExBjF,qBAAU,WACJ8G,EAASC,SACXD,EAASC,QAAQC,UAElB,CAACL,IAEJ,IAUMM,EACJ,wBAAC,IAAD,mDACM7I,EAAM8I,SAASC,gBACf/I,EAAM8I,SAASE,iBAFrB,IAGEC,IAAKjJ,EAAM8I,SAASI,UAChBlJ,EAAMhC,MAAMW,OAAOM,WAJzB,IAKE+C,EAAGvB,EAAa,OAAS,OACzB+B,aAAa,MACbsE,EAAGrG,EAAa,IAAM,IACtB6E,GAAG,OACH6D,IAAKnJ,EAAMoJ,QACX,eAAC,IAAD,WACE,cAAC,IAAD,CAAKpH,EAAE,OAAOqH,SAAS,SAAvB,SACE,sBAAMpB,UAAU,YAAY7D,SAnBf,SAAAC,GACnBA,EAAEC,iBACFkE,GAAc,GACdxI,EAAMsJ,WAAWtJ,EAAMoJ,MAAOpJ,EAAMyI,KAAKJ,SAAUf,IAgB7C,SACE,cAAC,IAAD,2BACMtH,EAAMhC,MAAMW,OAAOM,WADzB,IAEEtB,GAAG,cACH+J,OAAO,MACPlF,aAAa,cACbsE,EAAE,UACFa,YAAY,QACZlK,MAAiC,UAA1BuC,EAAMhC,MAAMN,UAAwB,QAAU,QACrDkK,aAAY,aACVnK,MAAiC,UAA1BuC,EAAMhC,MAAMN,UAAwB,QAAU,SACjDsC,EAAMhC,MAAMO,QACZyB,EAAMhC,MAAMW,OAAOO,sBACnB,IAEN8C,EAAGvB,EAAa,OAAS,OACzBoH,GAAG,QACHhD,YAAY,YACZJ,MAAO6C,EACP5C,SA1CS,SAAAL,GACnBkD,EAASlD,EAAEM,OAAOF,QA0CRwE,IAAKP,QArB0B1I,EAAMyI,KAAKlF,IAyBhD,cAAC,IAAD,CAAMK,MAAM,SAASD,QAAQ,SAAS3B,EAAE,MAAxC,SACE,cAACuH,GAAA,EAAD,CACEC,QAAQ,IACRzH,EAAE,MACFe,QAAS,WACP0F,GAAc,GACdxI,EAAMsJ,WAAWtJ,EAAMoJ,MAAOpJ,EAAMyI,KAAKJ,SAAUf,YAQzDmC,EACJ,wBAAC,IAAD,mDACMzJ,EAAM8I,SAASC,gBACf/I,EAAM8I,SAASE,iBAFrB,IAGEC,IAAKjJ,EAAM8I,SAASI,UAChBlJ,EAAMhC,MAAMW,OAAOM,WAJzB,IAKE+C,EAAGvB,EAAa,OAAS,OACzB+B,aAAa,MACbsE,EAAGrG,EAAa,IAAM,IACtB6E,GAAG,OACH6D,IAAKnJ,EAAMoJ,QACX,eAAC,IAAD,CAAMzF,QAAQ,gBAAd,UACE,cAAC,IAAD,CACE3B,EAAGvB,EAAa,OAAS,OACzB4I,SAAS,SAFX,SAIGrJ,EAAMyI,KAAKL,MADPpI,EAAMyI,KAAKlF,IAIlB,eAAC,IAAD,CACEK,MAAM,SACND,QAAQ,SACR3B,EAAGvB,EAAa,OAAS,MACzB+D,GAAI/D,EAAa,IAAM,MAJzB,UAKE,cAACiJ,GAAA,EAAD,CACEF,QAAS/I,EAAa,IAAM,IAC5BsB,EAAE,MACFe,QAAS,kBAAM9C,EAAM2J,WAAW3J,EAAMoJ,MAAOpJ,EAAMyI,KAAKJ,aAE1D,cAACuB,GAAA,EAAD,CACEJ,QAAS/I,EAAa,IAAM,IAC5BsB,EAAE,MACFe,QAAS,WACP0F,GAAc,GACdjB,EAASvH,EAAMyI,KAAKL,gBAQhC,OAAOG,EAAaM,EAAiBY,GCjFxBI,OAlCf,SAAkB7J,GAAQ,IAAD,EACCC,mBAAS,CAC/BsD,GAAI,KACJkB,MAAO,KAHc,mBAChB4C,EADgB,KACVyC,EADU,KAcvB,OAAIzC,EAAK9D,GACA,cAAC,EAAD,CAAU8D,KAAMA,EAAMjD,SATV,SAAAK,GACnBzE,EAAMsJ,WAAWjC,EAAK9D,GAAIkB,GAC1BqF,EAAQ,CACNvG,GAAI,KACJkB,MAAO,QAQJzE,EAAM+J,MAAMzH,KAAI,SAACmG,EAAMW,GAAP,OACrB,cAAC,IAAD,CAAyBY,YAAW,UAAKvB,EAAKlF,IAAM6F,MAAOA,EAA3D,SACG,SAAAN,GAAQ,OACP,cAAC,GAAD,CACE9K,MAAOgC,EAAMhC,MACb8K,SAAUA,EACVL,KAAMA,EACNW,MAAOA,EACPO,WAAY3J,EAAM2J,WAClBL,WAAYtJ,EAAMsJ,eARRb,EAAKlF,QCmKV0G,OApLf,SAAejK,GAAO,MAEMC,mBAAS,CACjCiK,SAAU,GACVC,eAAgB,KAJE,mBAEbJ,EAFa,KAENK,EAFM,KAsDdd,EAAa,SAACF,EAAOf,EAAUgC,GACnC,GAAKA,IAAY,QAAQC,KAAKD,GAA9B,CAGA,IAAME,EAAQ,eAAQR,GAEtB,GAAiB,QAAb1B,EAAoB,CACtB,IAAMmC,EAAK,YAAOT,EAAMG,UACxBM,EAAMpB,GAAOhB,KAAOiC,EACpBE,EAASL,SAAWM,MACf,CACL,IAAMA,EAAK,YAAOT,EAAMI,gBACxBK,EAAMpB,GAAOhB,KAAOiC,EACpBE,EAASJ,eAAiBK,EAE5BJ,EAASG,KAGLZ,EAAa,SAACP,EAAOf,GACzB,IAAMkC,EAAQ,eAAQR,GAEtB,GAAiB,QAAb1B,EAAoB,CACtB,IAAMmC,EAAK,YAAOT,EAAMG,UACxBM,EAAMC,OAAOrB,EAAO,GACpBmB,EAASL,SAAWM,MACf,CACL,IAAMA,EAAK,YAAOT,EAAMI,gBACxBK,EAAMC,OAAOrB,EAAO,GACpBmB,EAASJ,eAAiBK,EAE5BJ,EAASG,IAGLG,EACJ,cAAC,IAAD,CAAiBC,UAjFnB,SAAejJ,GACb,GAAIA,EAAOkJ,YAAa,CACtB,IAAMC,EAAQnJ,EAAOoJ,OAAOC,YACtBC,EAAStJ,EAAOkJ,YAAYG,YAClC,GAAIF,IAAUG,EAAQ,CACpB,IAAMR,EAAkB,QAAVK,EAAkBd,EAAMG,SAAWH,EAAMI,eADnC,EAEFK,EAAMC,OAAO/I,EAAOoJ,OAAO1B,MAAO,GAA7C6B,EAFa,oBAGpBT,EAAMC,OAAO/I,EAAOkJ,YAAYxB,MAAO,EAAG6B,GAC1C,IAAMV,EAAQ,eAAQR,GACZ,QAAVc,EACKN,EAASL,SAAWM,EACpBD,EAASJ,eAAiBK,EAC/BJ,EAASG,OACJ,CACL,IAAMW,EACM,SAAVL,EAAmBd,EAAMI,eAAiBJ,EAAMG,SAF7C,EAGagB,EAAWT,OAAO/I,EAAOoJ,OAAO1B,MAAO,GAAlD+B,EAHF,oBAIgB,SAArBA,EAAQ9C,SACH8C,EAAQ9C,SAAW,MACnB8C,EAAQ9C,SAAW,OACxB,IAAM+C,EACO,SAAXJ,EAAoBjB,EAAMI,eAAiBJ,EAAMG,SACnDkB,EAAgBX,OAAO/I,EAAOkJ,YAAYxB,MAAO,EAAG+B,GACpD,IAAMZ,EAAQ,eAAQR,GACR,SAAVc,GACFN,EAASJ,eAAiBe,EAC1BX,EAASL,SAAWkB,IAEpBb,EAASJ,eAAiBiB,EAC1Bb,EAASL,SAAWgB,GAEtBd,EAASG,MAkDb,SACE,eAAC,IAAD,CAAMhG,GAAG,OAAOvC,EAAE,OAAOqJ,eAAe,SAASpJ,EAAE,OAAnD,UACE,eAAC,IAAD,CACEsC,GAAG,OACHvC,EAAE,MACFC,EAAE,OACFoD,KAAK,IACLgG,eAAe,SACfC,cAAc,SANhB,UAOE,cAAC,IAAD,yBACEvH,SAAS,KACThC,EAAE,OACFgG,UAAU,UACL/H,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOO,sBACnB,IANN,4BASA,cAAC,IAAD,CAAW6L,YAAY,MAAvB,SACG,SAAAjC,GAAQ,OACP,eAAC,IAAD,2BACMA,EAASyC,gBADf,IAEEtC,IAAKH,EAASI,SACdlH,EAAE,OACFC,EAAE,OACFuJ,KAAK,QALP,UAME,cAAC,GAAD,CACExN,MAAOgC,EAAMhC,MACb+L,MAAOA,EAAMG,SACbP,WAAYA,EACZL,WAAYA,IAEbR,EAASjE,sBAKlB,eAAC,IAAD,CACEN,GAAG,OACHvC,EAAE,MACFC,EAAE,OACFoD,KAAK,IACLgG,eAAe,SACfC,cAAc,SANhB,UAOE,cAAC,IAAD,yBACEvH,SAAS,KACTgE,UAAU,SACVhG,EAAE,QACG/B,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOO,sBACnB,IANN,6BASA,cAAC,IAAD,CAAW6L,YAAY,OAAvB,SACG,SAAAjC,GAAQ,OACP,eAAC,IAAD,2BACMA,EAASyC,gBADf,IAEEtC,IAAKH,EAASI,SACdlH,EAAE,OACFC,EAAE,OACFuJ,KAAK,QALP,UAME,cAAC,GAAD,CACExN,MAAOgC,EAAMhC,MACb+L,MAAOA,EAAMI,eACbR,WAAYA,EACZL,WAAYA,IAEbR,EAASjE,2BAQxB,OACE,eAAC,IAAD,CAAM7C,EAAE,QAAQI,QAAQ,SAASwB,MAAM,SAAvC,UACE,cAAC,IAAD,yBACEG,SAAS,MACTgE,UAAU,SACVhG,EAAE,QACG/B,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOO,sBACnB,IANN,wBASA,cAAC,EAAD,CAAUlB,MAAOgC,EAAMhC,MAAOoG,SAnIlB,SAAAqE,GACd,GAAKA,EAAKL,OAAQ,QAAQkC,KAAK7B,EAAKL,MAApC,CAIA,IAAMmC,EAAQ,eAAQR,GACtBQ,EAASL,SAAT,CAAqBzB,GAArB,mBAA8BsB,EAAMG,WAEpCE,EAASG,OA4HNG,M,UCtLMe,GAAU,UACVC,GAAQ,QCsINC,OAlIf,SAAsB3L,GAAO,IAEnBtC,EAAcgJ,cAAdhJ,UAFmB,EAGGuC,mBAAS,GAHZ,mBAGpB2L,EAHoB,KAGXC,EAHW,OAIH5L,mBACtBD,EAAM8L,OAASL,GAAUzL,EAAM+L,YAAc/L,EAAMgM,WAL1B,mBAIpBC,EAJoB,KAIdC,EAJc,KAQrBC,EAAY3M,aAAa4M,QAAQ,cARZ,EASWnM,mBACpCkM,EACIzM,KAAK2M,MAAM7M,aAAa4M,QAAQ,eAAeE,YAC/CtM,EAAM+L,aAZe,mBASpBO,EAToB,KASPC,EATO,KAiBrBC,EAAO3F,iBAAO,MAEpBjF,qBAAU,WACR,IAAM6K,EAAa/M,KAAK2M,MAAM7M,aAAa4M,QAAQ,eAC/CK,IACFA,EAAWX,KAAO9L,EAAM8L,KACxBW,EAAWH,YAAcA,EACzB/M,OAAOC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU8M,OAE1D,CAACzM,EAAM8L,KAAMQ,IAEhB1K,qBAAU,WACR,IAAI6K,EAAa/M,KAAK2M,MAAM7M,aAAa4M,QAAQ,eAC7CK,GACFF,EAAeE,EAAWH,aAC1BtM,EAAM0M,QAAQD,EAAWX,MACzBI,EAAQhE,KAAKC,MAAMsE,EAAWH,YAAc,KAC5CT,EAAWY,EAAWH,YAAc,OAEpCG,EAAa,IAEFE,SAAU,EACrBF,EAAWG,WAAY,EACvBH,EAAWX,KAAO9L,EAAM8L,KACxBW,EAAWH,YAAcA,EACzB/M,OAAOC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU8M,OAE1D,IAIH,IAkBMI,EAAa,SAAAC,GAQjB,OAPAN,EAAK7D,QAAyB,GAAfmE,EAAoB,EACXvN,OAAOwN,aAAY,WACzClB,EAAWW,EAAK7D,QAAU,IAC1BuD,EAAQhE,KAAKC,MAAMqE,EAAK7D,QAAU,KAClC6D,EAAK7D,SAAW,EAtBlB4D,EAAeC,EAAK7D,SAIhB6D,EAAK7D,QAAU,IACjBuD,GAAuB,IAAflM,EAAM8L,KAAoB9L,EAAM+L,YAAc/L,EAAMgM,WAC5DO,GACiB,IAAfvM,EAAM8L,KAAwC,GAApB9L,EAAM+L,YAAqC,GAAlB/L,EAAMgM,WAE3DhM,EAAM0M,QAAQ1M,EAAM8L,OAASL,GAAUC,GAAQD,OAe9C,MA2BL,OAtBA7J,qBAAU,WACR,IAAIoL,EAkBJ,OAjBIhN,EAAM4M,YAEJX,IAASjM,EAAM+L,aAAeE,IAASjM,EAAMgM,UAE3ChM,EAAM8L,OAASL,GAEjBuB,EAAWH,EAAW7M,EAAM+L,aACnB/L,EAAM8L,OAASJ,KAExBsB,EAAWH,EAAW7M,EAAMgM,YAK9BgB,EAAWH,GAAYP,EAAc,GAAK,KAGvC,kBAAMW,cAAcD,MAC1B,CAAChN,EAAM8L,KAAM9L,EAAM4M,YAGpB,cAAC,IAAD,CAAMM,OAAO,OAAO7B,eAAe,SAAS8B,WAAW,SAAvD,SACE,eAAC,IAAD,CAAWlL,EAAE,OAAOtE,GAAG,cAAcyP,eAAa,EAAlD,UACE,eAAC,IAAD,yBACErL,EAAE,IACFgC,SAAS,OACL/D,EAAMhC,MAAMW,OAAOM,WAHzB,IAIEE,WAC4B,SAA1Ba,EAAMhC,MAAMN,WAAwBsC,EAAMhC,MAAMO,QAAhD,6CAC0CyB,EAAMhC,MAAMP,MAAMoC,WAD5D,uBAEoBG,EAAMhC,MAAMP,MAAMoC,UAFtC,4BAEmEG,EAAMhC,MAAMP,MAAMoC,UAFrF,gCAEsHG,EAAMhC,MAAMP,MAAMoC,WAE1IwN,OAAO,OACPvJ,WAAW,YAVb,eAWK9D,EAAM8L,KAAK5F,cAXhB,SAcA,cAAC,IAAD,yBACEzI,MAAqB,UAAdC,EAAwB,QAAU,SACpCsC,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOO,sBACnB,IAJN,IAKE6E,SAAS,MALX,SAMG6H,EAAU,GAAV,UAAkBK,EAAlB,aAA2BL,GAA3B,UAA0CK,EAA1C,YAAkDL,Y,wCC5HhD0B,GAAe,SAC1BvB,EACAwB,EACAC,EACA9M,GAEIqL,EAAcyB,GAChBD,EAAeC,GACf9M,EAAM,CACJyC,MAAO,QACPC,YAAa,kCACbC,OAAQ,QACRC,SAAU,IACVmK,YAAY,KAEL1B,EAAc,IACvBwB,EAAe,GACf7M,EAAM,CACJyC,MAAO,QACPC,YAAa,gCACbC,OAAQ,QACRC,SAAU,IACVmK,YAAY,MCmFHC,OA7Ff,SAAmB1N,GACjB,IAAMU,EAAQC,cAEd,OACE,cAAC,IAAD,yBACEsB,EAAE,OACFoD,KAAK,IACL1H,GAAG,cACHyP,eAAa,GACRpN,EAAMhC,MAAMO,QACbyB,EAAMhC,MAAMW,OAAOO,sBACnB,IAPN,aAQE,eAAC,IAAD,CAAMgO,OAAO,OAAOS,UAAU,SAAS/J,MAAM,SAASD,QAAQ,SAA9D,UACE,cAAC,KAAD,IACA,eAAC,IAAD,CAAM2B,GAAG,OAAOtD,EAAE,OAAO8B,WAAW,OAAOiE,UAAU,SAAShG,EAAE,IAAhE,UACG/B,EAAMmD,MAAM+C,cADf,aAGA,cAAC,KAAD,IACA,cAAC,IAAD,yBACEzC,KAAK,QACDzD,EAAMhC,MAAMW,OAAOhB,IAFzB,IAGEwI,QAAQ,KACRpC,SAAS,KACT8D,GAAI+F,IACJ9K,QAAS,WACPwK,GAAatN,EAAMiM,KAAMjM,EAAMkM,QAASlM,EAAM6N,OAAQnN,GAClDV,EAAMiM,KAAOjM,EAAM6N,OACrB7N,EAAMkM,QAAQlM,EAAMiM,KAAO,GAE3BvL,EAAM,CACJyC,MAAO,QACPC,YAAY,mCAAD,OAAqCpD,EAAM6N,QACtDxK,OAAQ,QACRC,SAAU,IACVmK,YAAY,KAhBpB,SAoBE,cAACK,GAAA,EAAD,OAEF,cAAC,KAAD,IACA,cAAC,IAAD,CACErK,KAAK,QACL9F,GAAG,cACHwI,QAAQ,KACRpC,SAAS,MACTgE,UAAU,SALZ,SAME,eAAC,KAAD,CACEgG,aAAc/N,EAAMgO,YACpBvJ,MAAOzE,EAAMiM,KACb7H,SAAU,SAAA6J,GDlEM,IAAAxJ,ECmEdzE,EAAMkM,QAAQgC,SAASD,EAAK,KAC5BX,GAAatN,EAAMiM,KAAMjM,EAAMkM,QAASlM,EAAM6N,OAAQnN,GDpExC+D,ECqEIwJ,GDpEtBE,OAAOC,MAAM3J,IAAoB,KAAVA,GAAuC,MAAvB0J,OAAOC,MAAM3J,KCqE9CzE,EAAMkM,QAAQlM,EAAMgO,cAGxBtJ,SAAU,SAAAuJ,GACRjO,EAAMkM,QAAQ+B,IAXlB,UAaE,cAAC,KAAD,IACA,cAAC,KAAD,SAGJ,cAAC,KAAD,IACA,cAAC,IAAD,yBACExK,KAAK,QACDzD,EAAMhC,MAAMW,OAAOhB,IAFzB,IAGEwI,QAAQ,KACRpC,SAAS,KACT8D,GAAI+F,IACJ9K,QAAS,WACPwK,GAAatN,EAAMiM,KAAMjM,EAAMkM,QAASlM,EAAM6N,OAAQnN,GAClDV,EAAMiM,KAAO,EACfjM,EAAMkM,QAAQlM,EAAMiM,KAAO,GAE3BvL,EAAM,CACJyC,MAAO,QACPC,YAAa,gCACbC,OAAQ,QACRC,SAAU,IACVmK,YAAY,KAhBpB,SAoBE,cAACY,GAAA,EAAD,OAEF,cAAC,KAAD,WCrEOC,OA9Bf,SAAuBtO,GAAQ,IACrBtC,EAAcgJ,cAAdhJ,UAER,OACE,eAAC,IAAD,CACEwP,OAAO,OACPzP,MAAqB,UAAdC,EAAwB,QAAU,QACzC2N,eAAe,SACf8B,WAAW,SAJb,UAKE,cAAC,GAAD,CACEnP,MAAOgC,EAAMhC,MACbmF,MAAM,UACN6K,YAAa,GACb/B,KAAMjM,EAAM+L,YACZ8B,OAAQ7N,EAAMwN,eACdtB,QAASlM,EAAMuN,iBAGjB,cAAC,GAAD,CACEvP,MAAOgC,EAAMhC,MACbmF,MAAM,QACN6K,YAAa,GACb/B,KAAMjM,EAAMgM,UACZ6B,OAAQ7N,EAAMuO,aACdrC,QAASlM,EAAMwO,mBC8ERC,OApGf,SAAezO,GAAQ,IAOjB0O,EAPgB,EACkBzO,mBAAS,IAD3B,mBACb8L,EADa,KACAwB,EADA,OAEctN,mBAAS,IAFvB,mBAEb+L,EAFa,KAEFwC,EAFE,OAGUvO,oBAAS,GAHnB,mBAGb0M,EAHa,KAGJgC,EAHI,OAII1O,mBAASwL,IAJb,mBAIbK,EAJa,KAIPY,EAJO,OAKczM,oBAAS,GALvB,mBAKb2M,EALa,KAKFgC,EALE,KAwDpB,OA9CAhN,qBAAU,WACR,IAAMiN,EAAYnP,KAAK2M,MAAM7M,aAAa4M,QAAQ,eAC9CyC,IACFF,EAAWE,EAAUlC,SACrBiC,GAAa,GACblC,EAAQmC,EAAU/C,SAEnB,IAGHlK,qBAAU,WACR,IAAMiN,EAAYnP,KAAK2M,MAAM7M,aAAa4M,QAAQ,eAC9CyC,IACFA,EAAUlC,QAAUA,EACpBpN,OAAOC,aAAaC,QAAQ,aAAcC,KAAKC,UAAUkP,OAE1D,CAAClC,IAGF+B,EADE/B,EAEA,cAAC,GAAD,CACE3O,MAAOgC,EAAMhC,MACb8N,KAAMA,EACNC,YAAaA,EACbW,QAASA,EACTC,QAASA,EACTgC,WAAYA,EACZ/B,UAAWA,EACXgC,aAAcA,EACd5C,UAAWA,IAKb,cAAC,GAAD,CACEhO,MAAOgC,EAAMhC,MACb+N,YAAaA,EACbwB,eAAgBA,EAChBC,eAAgB,GAChBxB,UAAWA,EACXwC,aAAcA,EACdD,aAAc,KAMlB,cAAC,IAAD,yBACEvM,EAAE,MACFwJ,KAAK,OACLrF,QAAQ,KACR2I,UAAU,UACVhI,EAAE,KACG9G,EAAMhC,MAAMO,QAAUyB,EAAMhC,MAAMW,OAAOS,oBAAsB,IANtE,aAOE,eAAC,IAAD,CACEoM,KAAK,OACLvJ,EAAE,OACF0B,QAAQ,SACRC,MAAM,SACNxB,QAAQ,SALV,UAME,cAAC,KAAD,UAASsM,IACT,eAAC,IAAD,CAAM3M,EAAE,IAAI4B,QAAQ,SAASC,MAAM,SAAnC,UACE,cAAC,KAAD,CAAQ7B,EAAE,OAAV,SACE,cAAC,IAAD,2BACM/B,EAAMhC,MAAMW,OAAOhB,IADzB,IAEEmF,QAAS,WACP6L,GAAYhC,GACZiC,GAAa,IAJjB,SAMGjC,EAAU,OAAS,aAIvBA,EACC,cAAC,KAAD,UACE,cAAC,IAAD,2BACM3M,EAAMhC,MAAMW,OAAOhB,IADzB,IAEEmF,QAAS,kBAAM8L,GAAchC,IAF/B,SAGGA,EAAY,QAAU,cAI3B,kCCcGmC,OAvGf,WAAgB,IACNrR,EAAcgJ,cAAdhJ,UADK,EAEuBuC,mBAClCT,aAAa4M,QAAQ,eACjB1M,KAAK2M,MAAM7M,aAAa4M,QAAQ,gBAChC5O,EAAsBoC,EAAQlC,IALvB,mBAENsR,EAFM,KAEMC,EAFN,KAQbrN,qBAAU,WACR,IAAMsN,EAAcxP,KAAK2M,MAAM7M,aAAa4M,QAAQ,gBAChD8C,GACFD,EACEzR,EAAsBwR,EAAWvR,MAAOC,EAAW,CACjDE,MAAOsR,EAAY3Q,QACnBV,OAAQqR,EAAY1Q,OAAOX,OAC3BC,WAAYoR,EAAY1Q,OAAOV,gBAIpC,CAACJ,EAAWsR,EAAWvR,QAC1B0R,aAAaC,oBAEb,IAAMC,EACJ,eAAC,IAAD,CAAWjC,eAAa,EAAxB,UACE,cAAC,EAAD,CAAQpP,MAAOgR,EAAY9L,SAAU+L,IACrC,cAAC,GAAD,CAAOjR,MAAOgR,IACd,cAAC,GAAD,CAAOhR,MAAOgR,OAIZM,EACJ,cAAC,IAAD,CACE/J,MAAM,QACN2H,OAAO,aACP7D,SAAS,SACTmC,KAAK,QACLzM,WACgB,UAAdrB,EACI,kCACA,kCARR,SAUG2R,IAICE,EACJ,cAAC,IAAD,CACEhK,MAAM,QACNiG,KAAK,QACLgE,QAAS,CACPjR,QAAQ,QAAD,OAAUyQ,EAAWxQ,OAAOE,WAA5B,MACP+Q,aAAc,QACdC,OAAQ,QACRC,SAAU,YACVzC,OAAQ,OACR0C,KAAM,EACNC,SAAU,QACVC,IAAK,EACLvK,MAAO,OACPwK,WAAY,YACZV,QAAS,KACTW,QAAS,GAfb,SAiBGX,IAICY,EACJ,cAAC,IAAD,CACE1K,MAAM,QACN2H,OAAO,aACP1B,KAAK,QACLgE,QAAS,CACPjR,QAAQ,QAAD,OAAUyQ,EAAWxQ,OAAOV,WAA5B,MACP2R,aAAc,QACdC,OAAQ,QACRC,SAAU,YACVzC,OAAQ,OACR0C,KAAM,EACNC,SAAU,QACVC,IAAK,EACLvK,MAAO,OACPwK,WAAY,YACZV,QAAS,KACTW,QAAS,GAhBb,SAkBGX,IAcL,OATIL,EAAWzQ,QACTyQ,EAAWxQ,OAAOX,OACH0R,EAEAU,EAGFX,GC/FNY,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3O,MAAK,YAAkD,IAA/C4O,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKRnS,GAAQ0S,YAAY,CAAE9P,OALb,CACb+P,iBAAkB,QAClBC,oBAAoB,KAKtBC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAgB/S,MAAOA,GAAvB,SACE,cAAC,GAAD,SAGJgT,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.13d876b6.chunk.js","sourcesContent":["export const generateGradientTheme = (\n  color,\n  colorMode,\n  bg = { image: false, random: true, custom_url: '' },\n  name = ''\n) => {\n  const theme = {\n    color,\n    colorMode,\n    name: name === '' ? color.name : name,\n    startColor: colorMode === 'dark' ? color.darkColor1 : color.lightColor1,\n    endColor: colorMode === 'dark' ? color.darkColor2 : color.lightColor2,\n    bgImage: bg.image,\n    bgInfo: {\n      location: 'online',\n      random_url: `https://source.unsplash.com/1600x900/?background,scenery,${color.name}`,\n      custom_url: bg.custom_url,\n      random: bg.random != null ? bg.random : true\n    },\n    styles: {\n      bg: {\n        color: color.textColor,\n        _hover: { bg: color.hover },\n        bgGradient:\n          colorMode === 'light'\n            ? `linear(to-bl,${color.lightColor1},${color.lightColor2})`\n            : `linear(to-bl,${color.darkColor1},${color.darkColor2})`,\n        reverse: {\n          color: color.textColor,\n          _hover: { bg: color.hover },\n          bgGradient:\n            colorMode === 'light'\n              ? `linear(to-r,${color.lightColor1},${color.lightColor2})`\n              : `linear(to-r,${color.darkColor1},${color.darkColor2})`\n        }\n      },\n      bgNoHover: {\n        color: color.textColor,\n        bgGradient:\n          colorMode === 'light'\n            ? `linear(to-bl,${color.lightColor1},${color.lightColor2})`\n            : `linear(to-bl,${color.darkColor1},${color.darkColor2})`\n      },\n      imageModeContrastText:\n        colorMode === 'dark'\n          ? {\n              textShadow:\n                '5px 5px 20px black, -5px -5px 20px black,-5px 5px 50px black'\n            }\n          : {\n              textShadow:\n                '5px 5px 20px white, -5px -5px 20px white,-5px 5px 50px white'\n            },\n      imageModeContrastBg:\n        colorMode === 'dark'\n          ? {\n              bg: 'rgba(0, 0, 0, 0.5)'\n            }\n          : {\n              bg: 'rgba(255, 255, 255, 0.2)'\n            }\n    }\n  };\n  return theme;\n};\n\nexport const saveThemeToStorage = newTheme => {\n  window.localStorage.setItem('timer-theme', JSON.stringify(newTheme));\n};\n\nexport const changeGradientThemeColorTo = (oldTheme, color) => {\n  const newTheme = generateGradientTheme(color, oldTheme.colorMode, {\n    image: oldTheme.bgImage,\n    random: oldTheme.bgInfo.random,\n    custom_url: oldTheme.bgInfo.custom_url\n  });\n  saveThemeToStorage(newTheme);\n  return newTheme;\n};\n\nexport const toggleBackgroundImageInGradientTheme = oldTheme => {\n  const newTheme = generateGradientTheme(oldTheme.color, oldTheme.colorMode, {\n    image: !oldTheme.bgImage,\n    random: oldTheme.bgInfo.random,\n    custom_url: oldTheme.bgInfo.custom_url\n  });\n  saveThemeToStorage(newTheme);\n  return newTheme;\n};\n\nexport const toggleRandomImageInGradientTheme = oldTheme => {\n  const newTheme = generateGradientTheme(oldTheme.color, oldTheme.colorMode, {\n    image: oldTheme.bgImage,\n    random: !oldTheme.bgInfo.random,\n    custom_url: oldTheme.bgInfo.custom_url\n  });\n  saveThemeToStorage(newTheme);\n  return newTheme;\n};\n\nexport const setGradientThemeImageCustomUrl = (oldTheme, url) => {\n  const newTheme = generateGradientTheme(oldTheme.color, oldTheme.colorMode, {\n    image: oldTheme.bgImage,\n    random: oldTheme.bgInfo.random,\n    custom_url: url\n  });\n  saveThemeToStorage(newTheme);\n  return newTheme;\n};\n\nexport const BLUE = {\n  name: 'blue',\n  baseColor: 'blue.500',\n  lightColor1: '#149fff',\n  lightColor2: '#117aff',\n  darkColor1: '#149fff',\n  darkColor2: '#117aff',\n  hover: 'blue.600',\n  textColor: 'white'\n};\n\nexport const PURPLE = {\n  name: 'purple',\n  baseColor: '#9b00fa',\n  lightColor1: '#5d0cff',\n  lightColor2: '#9b00fa',\n  darkColor1: '#5d0cff',\n  darkColor2: '#9b00fa',\n  hover: '#5d0cff',\n  textColor: 'white'\n};\n\nexport const ORANGE = {\n  name: 'orange',\n  baseColor: 'orange.500',\n  lightColor1: '#F98745',\n  lightColor2: '#FC6952',\n  darkColor1: '#F98745',\n  darkColor2: '#FC6952',\n  hover: '#e56a39',\n  textColor: 'white'\n};\n\nexport const RED = {\n  name: 'red',\n  baseColor: 'red.500',\n  lightColor1: '#F22E44',\n  lightColor2: '#CE263B',\n  darkColor1: '#F22E44',\n  darkColor2: '#CE263B',\n  hover: '#D43A5A',\n  textColor: 'white'\n};\n\nexport const GREEN = {\n  name: 'green',\n  baseColor: 'lime',\n  lightColor1: '#9AF945',\n  lightColor2: '#65F883',\n  darkColor1: '#9AF945',\n  darkColor2: '#65F883',\n  hover: 'lime',\n  textColor: 'black'\n};\n\nexport const YELLOW = {\n  name: 'yellow',\n  baseColor: 'yellow',\n  lightColor1: '#FECE52',\n  lightColor2: '#FDA714',\n  darkColor1: '#FECE52',\n  darkColor2: '#FDA714',\n  hover: '#FFCC30',\n  textColor: 'black'\n};\n\nexport const themesList = [BLUE, PURPLE, ORANGE, RED, GREEN, YELLOW];\n","import React, { useEffect, useState } from 'react';\nimport { createApi } from 'unsplash-js';\nimport {\n  Box,\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Image,\n  Input,\n  Link,\n  Skeleton,\n  Text,\n  useMediaQuery,\n  useToast\n} from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport { config } from 'dotenv';\nimport { setGradientThemeImageCustomUrl } from '../../Constants/themes';\n\nfunction ImageSearchDrawer(props) {\n  const [searchInput, setSearchInput] = useState('nature background');\n  const [photosResponse, setPhotosResponse] = useState(null);\n  const [searchClicked, setSearchClicked] = useState(false);\n  const [isOnmobile] = useMediaQuery('(max-width: 768px)');\n  const toast = useToast();\n\n  config();\n\n  const unsplash = createApi({\n    accessKey: process.env.REACT_APP_API_KEY\n  });\n\n  const searchUnsplash = searchFor => {\n    unsplash.search\n      .getPhotos({\n        query: searchFor,\n        orientation: isOnmobile ? 'portrait' : 'landscape',\n        per_page: 30\n      })\n      .then(result => {\n        if (result != null) {\n          setPhotosResponse(result);\n        }\n        // console.log(result);\n      })\n      .catch(() => {\n        // console.log('something went wrong!');\n      });\n  };\n  useEffect(() => {\n    if (!props.theme.bgInfo.random && props.theme.bgImage && props.isOpen) {\n      searchUnsplash('nature background');\n    }\n  }, [props.theme.bgInfo.random, props.theme.bgImage, props.isOpen]);\n\n  const handleSearch = () => {\n    searchUnsplash(searchInput);\n  };\n\n  let images = (\n    <Flex>\n      {searchClicked ? (\n        <Skeleton m=\"4\" w=\"100%\" h=\"100%\" />\n      ) : (\n        <Flex m=\"4\" w=\"100%\" h=\"100%\" />\n      )}\n    </Flex>\n  );\n  if (photosResponse != null && photosResponse.response != null) {\n    images = (\n      <Flex m=\"4\" w=\"100%\" h=\"90%\" flexWrap=\"wrap\" flexDir=\"row\">\n        {photosResponse.response.results.map(photo => (\n          <Box key={photo.id} m=\"2\" w={isOnmobile ? '28%' : '25%'}>\n            <Image\n              w=\"100%\"\n              h={isOnmobile ? '200px' : '100px'}\n              borderRadius=\"4px\"\n              src={photo.urls.regular}\n              alt={photo.alt_description}\n              onClick={() => {\n                const newTheme = setGradientThemeImageCustomUrl(\n                  props.theme,\n                  photo.urls.regular\n                );\n                props.setTheme(newTheme);\n                toast({\n                  title: 'Background changed!',\n                  description:\n                    'Close the image search drawer to see your changes',\n                  status: 'success',\n                  duration: 500\n                });\n              }}\n            />\n          </Box>\n        ))}\n      </Flex>\n    );\n  }\n\n  return (\n    <Drawer\n      onClose={props.onClose}\n      isOpen={props.isOpen}\n      size={isOnmobile ? 'sm' : 'lg'}\n      placement=\"right\">\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader>\n            <Flex justify=\"space-between\" w=\"100%\" align=\"center\">\n              <Flex flexDir=\"column\">\n                <Text ml=\"4\" fontWeight=\"bold\">\n                  Choose Background Image\n                </Text>\n                <Text ml=\"4\" fontSize=\"sm\">\n                  Images from{' '}\n                  <Link\n                    color=\"teal.500\"\n                    href=\"https://www.unsplash.com\"\n                    isExternal>\n                    Unsplash.com\n                  </Link>\n                </Text>\n              </Flex>\n              <Button variant=\"outline\" mr=\"1\" onClick={props.onClose}>\n                Done\n              </Button>\n            </Flex>\n          </DrawerHeader>\n          <DrawerBody>\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                handleSearch();\n              }}>\n              <Flex mx=\"2\" w=\"98%\">\n                <Input\n                  w=\"100%\"\n                  pr=\"1vw\"\n                  value={searchInput}\n                  onChange={e => {\n                    setSearchInput(e.target.value);\n                  }}\n                  variant=\"outline\"\n                  borderRight=\"0px\"\n                  borderRadius=\"4px 0px 0px 4px\"\n                  placeholder=\"Search Images\"\n                />\n                <Button\n                  size=\"md\"\n                  type=\"submit\"\n                  minW=\"max-content\"\n                  borderRadius=\"0px 4px 4px 0px\"\n                  leftIcon={<Search2Icon />}\n                  onClick={() => setSearchClicked(true)}>\n                  search\n                </Button>\n              </Flex>\n            </form>\n\n            {images}\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n}\n\nexport default ImageSearchDrawer;\n","import { Search2Icon } from '@chakra-ui/icons';\nimport { Button, Flex, Switch, Text, useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport {\n  toggleBackgroundImageInGradientTheme,\n  toggleRandomImageInGradientTheme\n} from '../../Constants/themes';\nimport ImageSearchDrawer from './ImageSearchDrawer';\n\nfunction BackgroundOptions(props) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <Flex flexDir=\"column\" flex=\"1\" my=\"8\">\n      <Text ml=\"2\" fontWeight=\"800\">\n        Background\n      </Text>\n      <Flex m=\"2\" flexDir=\"column\">\n        <Flex m=\"2\" w=\"90%\" justify=\"space-between\">\n          <Text width=\"70%\" mr=\"4\">\n            Background Image\n          </Text>\n          <Switch\n            size=\"lg\"\n            colorScheme={props.theme.name}\n            isChecked={props.theme.bgImage}\n            onChange={() => {\n              const newTheme = toggleBackgroundImageInGradientTheme(\n                props.theme\n              );\n              props.setTheme(newTheme);\n            }}\n          />\n        </Flex>\n        {props.theme.bgImage ? (\n          <Flex m=\"2\" w=\"90%\" justify=\"space-between\">\n            <Text width=\"70%\" mr=\"4\">\n              Random Image\n            </Text>\n            <Switch\n              size=\"lg\"\n              colorScheme={props.theme.name}\n              isChecked={props.theme.bgInfo.random}\n              onChange={() => {\n                const newTheme = toggleRandomImageInGradientTheme(props.theme);\n                props.setTheme(newTheme);\n              }}\n            />\n          </Flex>\n        ) : (\n          <div />\n        )}\n        {!props.theme.bgInfo.random && props.theme.bgImage ? (\n          <Button\n            my=\"4\"\n            minW=\"max-content\"\n            w=\"40%\"\n            leftIcon={<Search2Icon />}\n            onClick={() => onOpen()}>\n            Find image\n          </Button>\n        ) : (\n          <div />\n        )}\n      </Flex>\n      <ImageSearchDrawer\n        isOpen={isOpen}\n        onClose={onClose}\n        theme={props.theme}\n        setTheme={props.setTheme}\n      />\n    </Flex>\n  );\n}\n\nexport default BackgroundOptions;\n","import { Flex, Square, Text, Tooltip } from '@chakra-ui/react';\nimport uuid from 'react-uuid';\nimport React from 'react';\nimport { changeGradientThemeColorTo, themesList } from '../../Constants/themes';\n\nfunction ColourSelector(props) {\n  return (\n    <Flex flexDir=\"column\" flex=\"1\">\n      <Text ml=\"2\" fontWeight=\"800\">\n        Colours\n      </Text>\n      <Flex mt=\"4\" maxW=\"40vw\" flexWrap=\"wrap\">\n        {themesList.map((item, i) => {\n          return (\n            <Tooltip label={item.name.toUpperCase()} key={uuid()}>\n              <Square\n                m=\"2\"\n                size=\"10\"\n                bg={item.baseColor}\n                rounded=\"md\"\n                onClick={() => {\n                  props.setTheme(\n                    changeGradientThemeColorTo(props.theme, themesList[i])\n                  );\n                }}\n              />\n            </Tooltip>\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default ColourSelector;\n","import React from 'react';\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Text\n} from '@chakra-ui/react';\nimport BackgroundOptions from './BackgroundOptions';\nimport ColourSelector from './ColourSelector';\n\nfunction ThemeDrawer(props) {\n  return (\n    <Drawer\n      isOpen={props.isOpen}\n      placement=\"right\"\n      onClose={props.onClose}\n      finalFocusRef={props.btnRef}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>\n            <Text ml=\"3\" fontWeight=\"800\">\n              Customize Theme\n            </Text>\n          </DrawerHeader>\n\n          <DrawerBody>\n            <Flex flexDir=\"column\">\n              <ColourSelector theme={props.theme} setTheme={props.setTheme} />\n              <BackgroundOptions\n                theme={props.theme}\n                setTheme={props.setTheme}\n              />\n            </Flex>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={props.onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n}\n\nexport default ThemeDrawer;\n","import React from 'react';\nimport {\n  Flex,\n  Heading,\n  IconButton,\n  useColorMode,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { MoonIcon, SettingsIcon, SunIcon } from '@chakra-ui/icons';\nimport { IoMdBrush } from 'react-icons/io';\nimport ThemeDrawer from './ThemeDrawer';\n\nfunction Header(props) {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef();\n\n  return (\n    <>\n      <Flex justify=\"center\" align=\"center\" p=\"5\" m=\"4\">\n        <Heading\n          color={colorMode === 'light' ? 'black' : 'white'}\n          {...(props.theme.bgImage\n            ? props.theme.styles.imageModeContrastText\n            : {})}\n          mx=\"20px\">\n          Pomodoro Timer\n        </Heading>\n        <IconButton\n          color={colorMode === 'light' ? 'black' : 'white'}\n          icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\n          {...(props.theme.bgImage\n            ? props.theme.styles.imageModeContrastBg\n            : {})}\n          onClick={toggleColorMode}\n          mx=\"10px\"\n          fill=\"red\"\n        />\n        <IconButton\n          color={colorMode === 'light' ? 'black' : 'white'}\n          icon={<IoMdBrush />}\n          {...(props.theme.bgImage\n            ? props.theme.styles.imageModeContrastBg\n            : {})}\n          onClick={onOpen}\n          mx=\"10px\"\n          fill=\"red\"\n        />\n        <IconButton\n          color={colorMode === 'light' ? 'black' : 'white'}\n          icon={<SettingsIcon />}\n          {...(props.theme.bgImage\n            ? props.theme.styles.imageModeContrastBg\n            : {})}\n          onClick={onOpen}\n          mx=\"10px\"\n          fill=\"red\"\n        />\n      </Flex>\n      <ThemeDrawer\n        isOpen={isOpen}\n        onClose={onClose}\n        btnRef={btnRef}\n        theme={props.theme}\n        setTheme={props.setTheme}\n      />\n    </>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { HStack, Box, useMediaQuery } from '@chakra-ui/react';\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n  const [isOnmobile] = useMediaQuery('(max-width: 768px)');\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n  // function to check when in the correct mode( update/default) to change the element if needed when pressed the check button in the updateModo\n  const handleSubmit = e => {\n    e.preventDefault();\n    // function to create a random id and get the text input, used to give value to the Todo Item\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n      columnID: 'NEW'\n    });\n\n    setInput(' ');\n  };\n  // function: Bon to insert the elements into the TodoList\n  const taskOption = (\n    <HStack spacing=\"0px\" w={isOnmobile ? '70vw' : '32vw'}>\n      <Box\n        {...props.theme.styles.bgNoHover}\n        bg=\"transparent\"\n        border=\"2px\"\n        borderRadius=\"4px 0 0 4px\"\n        p=\"14px 16px 14px 16px\"\n        borderColor={props.theme.startColor}\n        color={props.theme.colorMode === 'light' ? 'black' : 'white'}\n        _placeholder={{\n          color: props.theme.colorMode === 'light' ? 'black' : 'white',\n          ...(props.theme.bgImage\n            ? props.theme.styles.imageModeContrastText\n            : {})\n        }}\n        w=\"70%\"\n        as=\"input\"\n        my=\"10px\"\n        placeholder=\"Add Task\"\n        value={input}\n        onChange={handleChange}\n      />\n      <Box\n        as=\"button\"\n        type=\"submit\"\n        ml=\"0px\"\n        w=\"30%\"\n        border=\"2px\"\n        py=\"14px\"\n        borderRadius=\"0 4px 4px 0\"\n        textAlign=\"center\"\n        {...props.theme.styles.bg}\n        borderColor={props.theme.startColor}\n        borderLeft=\"0px\">\n        Add Task\n      </Box>\n    </HStack>\n  );\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      {taskOption}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { EditIcon, DeleteIcon, CheckIcon } from '@chakra-ui/icons';\nimport { Box, Flex, useMediaQuery } from '@chakra-ui/react';\n\nfunction TodoItem(props) {\n  const [updateMode, setUpdateMode] = useState(false);\n  const [input, setInput] = useState(props.todo.text);\n  const [isOnmobile] = useMediaQuery('(max-width: 768px)');\n\n  const inputRef = useRef(null);\n  // function to make focus when updating the Todo element\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [updateMode]);\n  // funcito nto handle the text element of the todo Item\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n  // function to check when in the correct mode( update/default) to change the element if needed when pressed the check button in the updateModo\n  const handleSubmit = e => {\n    e.preventDefault();\n    setUpdateMode(false);\n    props.updateTodo(props.index, props.todo.columnID, input);\n  };\n  // function for when in the update mode to change the Todo element being updated to a different visual mode\n  const updateTodoMode = (\n    <Box\n      {...props.provided.draggableProps}\n      {...props.provided.dragHandleProps}\n      ref={props.provided.innerRef}\n      {...props.theme.styles.bgNoHover}\n      w={isOnmobile ? '42vw' : '100%'}\n      borderRadius=\"4px\"\n      p={isOnmobile ? '2' : '4'}\n      my=\"10px\"\n      key={props.index}>\n      <Flex>\n        <Box w=\"40vw\" overflow=\"hidden\" key={props.todo.id}>\n          <form className=\"todo-form\" onSubmit={handleSubmit}>\n            <Box\n              {...props.theme.styles.bgNoHover}\n              bg=\"transparent\"\n              border=\"2px\"\n              borderRadius=\"4px 0 0 4px\"\n              p=\"4px 8px\"\n              borderColor=\"white\"\n              color={props.theme.colorMode === 'light' ? 'black' : 'white'}\n              _placeholder={{\n                color: props.theme.colorMode === 'light' ? 'black' : 'white',\n                ...(props.theme.bgImage\n                  ? props.theme.styles.imageModeContrastText\n                  : {})\n              }}\n              w={isOnmobile ? '30vw' : '100%'}\n              as=\"input\"\n              placeholder=\"Edit Text\"\n              value={input}\n              onChange={handleChange}\n              ref={inputRef}\n            />\n          </form>\n        </Box>\n        <Flex align=\"center\" justify=\"center\" w=\"10%\">\n          <CheckIcon\n            boxSize=\"5\"\n            m=\"8px\"\n            onClick={() => {\n              setUpdateMode(false);\n              props.updateTodo(props.index, props.todo.columnID, input);\n            }}\n          />\n        </Flex>\n      </Flex>\n    </Box>\n  );\n  // function to define when in default page in the file\n  const defaultTodoMode = (\n    <Box\n      {...props.provided.draggableProps}\n      {...props.provided.dragHandleProps}\n      ref={props.provided.innerRef}\n      {...props.theme.styles.bgNoHover}\n      w={isOnmobile ? '42vw' : '100%'}\n      borderRadius=\"4px\"\n      p={isOnmobile ? '2' : '4'}\n      my=\"10px\"\n      key={props.index}>\n      <Flex justify=\"space-between\">\n        <Box\n          w={isOnmobile ? '20vw' : '200%'}\n          overflow=\"hidden\"\n          key={props.todo.id}>\n          {props.todo.text}\n        </Box>\n\n        <Flex\n          align=\"center\"\n          justify=\"center\"\n          w={isOnmobile ? '10vw' : '40%'}\n          pr={isOnmobile ? '2' : '0px'}>\n          <DeleteIcon\n            boxSize={isOnmobile ? '4' : '5'}\n            m=\"8px\"\n            onClick={() => props.removeTodo(props.index, props.todo.columnID)}\n          />\n          <EditIcon\n            boxSize={isOnmobile ? '4' : '5'}\n            m=\"8px\"\n            onClick={() => {\n              setUpdateMode(true);\n              setInput(props.todo.text);\n            }}\n          />\n        </Flex>\n      </Flex>\n    </Box>\n  );\n  // return to check when in the correct mode\n  return updateMode ? updateTodoMode : defaultTodoMode;\n}\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport TodoForm from './TodoForm';\nimport TodoItem from './TodoItem';\n\nfunction TodoList(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n  // function to save the update when pressed the check button\n  const submitUpdate = value => {\n    props.updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: ''\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n  // map to map each element inside the todoList to have is as a prop when calling it from other function\n  return props.todos.map((todo, index) => (\n    <Draggable key={todo.id} draggableId={`${todo.id}`} index={index}>\n      {provided => (\n        <TodoItem\n          theme={props.theme}\n          provided={provided}\n          todo={todo}\n          index={index}\n          removeTodo={props.removeTodo}\n          updateTodo={props.updateTodo}\n        />\n      )}\n    </Draggable>\n  ));\n}\n\nexport default TodoList;\n","/* eslint-disable no-unused-expressions */\nimport React, { useState } from 'react';\nimport { Heading, Flex, Box } from '@chakra-ui/react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\n\nfunction Tasks(props) {\n  // useState to create the todo items and use the object elements to store the values of each column\n  const [todos, setTodos] = useState({\n    newTasks: [],\n    completedTasks: []\n  });\n  // function to check the location in the DND feature and save the values for the respective location\n  function onEnd(result) {\n    if (result.destination) {\n      const start = result.source.droppableId;\n      const finish = result.destination.droppableId;\n      if (start === finish) {\n        const items = start === 'NEW' ? todos.newTasks : todos.completedTasks;\n        const [reorder] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorder);\n        const newTodos = { ...todos };\n        start === 'NEW'\n          ? (newTodos.newTasks = items)\n          : (newTodos.completedTasks = items);\n        setTodos(newTodos);\n      } else {\n        const sourceList =\n          start === 'DONE' ? todos.completedTasks : todos.newTasks;\n        const [removed] = sourceList.splice(result.source.index, 1);\n        removed.columnID === 'DONE'\n          ? (removed.columnID = 'NEW')\n          : (removed.columnID = 'DONE');\n        const destinationList =\n          finish === 'DONE' ? todos.completedTasks : todos.newTasks;\n        destinationList.splice(result.destination.index, 0, removed);\n        const newTodos = { ...todos };\n        if (start === 'DONE') {\n          newTodos.completedTasks = sourceList;\n          newTodos.newTasks = destinationList;\n        } else {\n          newTodos.completedTasks = destinationList;\n          newTodos.newTasks = sourceList;\n        }\n        setTodos(newTodos);\n      }\n    }\n  }\n  // function to check create the elements of the todo list ( Todo Item ).\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = { ...todos };\n    newTodos.newTasks = [todo, ...todos.newTasks];\n\n    setTodos(newTodos);\n  };\n  // function to update the elements in the todo List\n  const updateTodo = (index, columnID, newValue) => {\n    if (!newValue || /^\\s*$/.test(newValue)) {\n      return;\n    }\n    const newTodos = { ...todos };\n\n    if (columnID === 'NEW') {\n      const items = [...todos.newTasks];\n      items[index].text = newValue;\n      newTodos.newTasks = items;\n    } else {\n      const items = [...todos.completedTasks];\n      items[index].text = newValue;\n      newTodos.completedTasks = items;\n    }\n    setTodos(newTodos);\n  };\n  // remove function to Remove the Todo Item when pressed the button delete\n  const removeTodo = (index, columnID) => {\n    const newTodos = { ...todos };\n\n    if (columnID === 'NEW') {\n      const items = [...todos.newTasks];\n      items.splice(index, 1);\n      newTodos.newTasks = items;\n    } else {\n      const items = [...todos.completedTasks];\n      items.splice(index, 1);\n      newTodos.completedTasks = items;\n    }\n    setTodos(newTodos);\n  };\n  // function to run the Tasks\n  const desktopTodos = (\n    <DragDropContext onDragEnd={onEnd}>\n      <Flex mx=\"10px\" w=\"95vw\" justifyContent=\"center\" h=\"100%\">\n        <Flex\n          mx=\"10px\"\n          w=\"1/3\"\n          h=\"100%\"\n          flex=\"1\"\n          justifyContent=\"center\"\n          flexDirection=\"column\">\n          <Heading\n            fontSize=\"xl\"\n            m=\"30px\"\n            textAlign=\"center\"\n            {...(props.theme.bgImage\n              ? props.theme.styles.imageModeContrastText\n              : {})}>\n            New Tasks\n          </Heading>\n          <Droppable droppableId=\"NEW\">\n            {provided => (\n              <Box\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                w=\"100%\"\n                h=\"100%\"\n                minH=\"200px\">\n                <TodoList\n                  theme={props.theme}\n                  todos={todos.newTasks}\n                  removeTodo={removeTodo}\n                  updateTodo={updateTodo}\n                />\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n        </Flex>\n        <Flex\n          mx=\"10px\"\n          w=\"1/3\"\n          h=\"100%\"\n          flex=\"1\"\n          justifyContent=\"center\"\n          flexDirection=\"column\">\n          <Heading\n            fontSize=\"xl\"\n            textAlign=\"center\"\n            m=\"30px\"\n            {...(props.theme.bgImage\n              ? props.theme.styles.imageModeContrastText\n              : {})}>\n            Tasks Done\n          </Heading>\n          <Droppable droppableId=\"DONE\">\n            {provided => (\n              <Box\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                w=\"100%\"\n                h=\"100%\"\n                minH=\"200px\">\n                <TodoList\n                  theme={props.theme}\n                  todos={todos.completedTasks}\n                  removeTodo={removeTodo}\n                  updateTodo={updateTodo}\n                />\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n        </Flex>\n      </Flex>\n    </DragDropContext>\n  );\n  return (\n    <Flex w=\"100vw\" flexDir=\"column\" align=\"center\">\n      <Heading\n        fontSize=\"2xl\"\n        textAlign=\"center\"\n        m=\"30px\"\n        {...(props.theme.bgImage\n          ? props.theme.styles.imageModeContrastText\n          : {})}>\n        Tasks\n      </Heading>\n      <TodoForm theme={props.theme} onSubmit={addTodo} />\n      {desktopTodos}\n    </Flex>\n  );\n}\n\nexport default Tasks;\n","export const SESSION = 'session';\nexport const BREAK = 'break';\n","import { Container, Flex, Text, useColorMode } from '@chakra-ui/react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { SESSION, BREAK } from '../../Constants/modes';\n// import { useDisclosure } from '@chakra-ui/react';\n\nfunction RunningTimer(props) {\n  // useStates defined here\n  const { colorMode } = useColorMode();\n  const [seconds, setSeconds] = useState(0);\n  const [mins, setMins] = useState(\n    props.mode === SESSION ? props.sessionMins : props.breakMins\n  );\n  // const [notifications, setNotifications] = useState(false);\n  const timeProps = localStorage.getItem('timerProps');\n  const [updatedTime, setUpdatedTime] = useState(\n    timeProps\n      ? JSON.parse(localStorage.getItem('timerProps')).updatedTime\n      : props.sessionMins\n  );\n  // const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // variables defined here\n  const time = useRef(null);\n\n  useEffect(() => {\n    const timerProps = JSON.parse(localStorage.getItem('timerProps'));\n    if (timerProps) {\n      timerProps.mode = props.mode;\n      timerProps.updatedTime = updatedTime;\n      window.localStorage.setItem('timerProps', JSON.stringify(timerProps));\n    }\n  }, [props.mode, updatedTime]);\n\n  useEffect(() => {\n    let timerProps = JSON.parse(localStorage.getItem('timerProps'));\n    if (timerProps) {\n      setUpdatedTime(timerProps.updatedTime);\n      props.setMode(timerProps.mode);\n      setMins(Math.floor(timerProps.updatedTime / 60));\n      setSeconds(timerProps.updatedTime % 60);\n    } else {\n      timerProps = {};\n\n      timerProps.started = true;\n      timerProps.isRunning = false;\n      timerProps.mode = props.mode;\n      timerProps.updatedTime = updatedTime;\n      window.localStorage.setItem('timerProps', JSON.stringify(timerProps));\n    }\n  }, []);\n\n  // javascript functions defined here\n  // function to handle the countdown. will be called every second.\n  const countdownHandler = () => {\n    setUpdatedTime(time.current);\n    // if (!props.isRunning) {\n    //   clearInterval(interval);\n    // }\n    if (time.current < 0) {\n      setMins(props.mode === !SESSION ? props.sessionMins : props.breakMins);\n      setUpdatedTime(\n        props.mode === !SESSION ? props.sessionMins * 60 : props.breakMins * 60\n      );\n      props.setMode(props.mode === SESSION ? BREAK : SESSION);\n      // if (notifications == true) {\n      //   //give toast notification that we are switching mode\n      // }\n    }\n  };\n\n  // function that takes anammout of minutes as a parameter and starts the timer\n  const startTimer = startingMins => {\n    time.current = startingMins * 60 - 1;\n    const runningInterval = window.setInterval(() => {\n      setSeconds(time.current % 60);\n      setMins(Math.floor(time.current / 60));\n      time.current -= 1;\n      countdownHandler();\n    }, 1000);\n    return runningInterval;\n  };\n\n  // useEffects defined here\n  useEffect(() => {\n    let interval;\n    if (props.isRunning) {\n      // when start is clicked state is changed\n      if (mins === props.sessionMins || mins === props.breakMins) {\n        // checking if timer is starting again or just starting\n        if (props.mode === SESSION) {\n          // check the mode\n          interval = startTimer(props.sessionMins);\n        } else if (props.mode === BREAK) {\n          // check the mode\n          interval = startTimer(props.breakMins);\n        }\n      } else {\n        // if timer is running and we pause, when unpaused we pass updated time.current back into startTimer\n        // console.log(updatedTime);\n        interval = startTimer((updatedTime + 1) / 60);\n      }\n    }\n    return () => clearInterval(interval);\n  }, [props.mode, props.isRunning]);\n\n  return (\n    <Flex height=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Container h=\"100%\" bg=\"transparent\" centerContent>\n        <Text\n          m=\"5\"\n          fontSize=\"2xl\"\n          {...props.theme.styles.bgNoHover}\n          textShadow={\n            props.theme.colorMode === 'dark' && props.theme.bgImage\n              ? `1px 1px 50px black, -1px -1px 40px ${props.theme.color.baseColor}`\n              : `1px 1px 50px ${props.theme.color.baseColor}, -1px -1px 40px ${props.theme.color.baseColor}, -4px 4px 30px black${props.theme.color.baseColor}`\n          }\n          bgClip=\"text\"\n          fontWeight=\"extrabold\">\n          - {props.mode.toUpperCase()} -\n        </Text>\n\n        <Text\n          color={colorMode === 'light' ? 'black' : 'white'}\n          {...(props.theme.bgImage\n            ? props.theme.styles.imageModeContrastText\n            : {})}\n          fontSize=\"8xl\">\n          {seconds < 10 ? `${mins}:0${seconds}` : `${mins}:${seconds}`}\n        </Text>\n      </Container>\n    </Flex>\n  );\n}\n\nexport default RunningTimer;\n","export const isInputValid = value => {\n  return !Number.isNaN(value) && value !== '' && Number.isNaN(value) != null;\n};\n\nexport const validateMins = (\n  sessionMins,\n  setSessionMins,\n  maxSessionMins,\n  toast\n) => {\n  if (sessionMins > maxSessionMins) {\n    setSessionMins(maxSessionMins);\n    toast({\n      title: 'Error',\n      description: 'Minutes are exceeding max limit',\n      status: 'error',\n      duration: 1000,\n      isClosable: true\n    });\n  } else if (sessionMins < 1) {\n    setSessionMins(1);\n    toast({\n      title: 'Error',\n      description: 'Minutes cannot be less than 1',\n      status: 'error',\n      duration: 1000,\n      isClosable: true\n    });\n  }\n};\n","import { AddIcon, MinusIcon } from '@chakra-ui/icons';\nimport {\n  Button,\n  Container,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  Flex,\n  Spacer,\n  Square,\n  Text,\n  useToast\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { isInputValid, validateMins } from './utilities';\n\nfunction MinSetter(props) {\n  const toast = useToast();\n\n  return (\n    <Container\n      h=\"100%\"\n      flex=\"1\"\n      bg=\"transparent\"\n      centerContent\n      {...(props.theme.bgImage\n        ? props.theme.styles.imageModeContrastText\n        : {})}>\n      <Flex height=\"100%\" direction=\"column\" align=\"center\" justify=\"center\">\n        <Spacer />\n        <Text my=\"10px\" w=\"100%\" fontWeight=\"bold\" textAlign=\"center\" m=\"8\">\n          {props.title.toUpperCase()} (mins)\n        </Text>\n        <Spacer />\n        <Square\n          size=\"40px\"\n          {...props.theme.styles.bg}\n          rounded=\"md\"\n          fontSize=\"lg\"\n          as={Button}\n          onClick={() => {\n            validateMins(props.mins, props.setMins, props.maxVal, toast);\n            if (props.mins < props.maxVal) {\n              props.setMins(props.mins + 1);\n            } else {\n              toast({\n                title: 'Error',\n                description: `Minutes cannot exceed max limit ${props.maxVal}`,\n                status: 'error',\n                duration: 1000,\n                isClosable: true\n              });\n            }\n          }}>\n          <AddIcon />\n        </Square>\n        <Spacer />\n        <Square\n          size=\"100px\"\n          bg=\"transparent\"\n          rounded=\"md\"\n          fontSize=\"6xl\"\n          textAlign=\"center\">\n          <Editable\n            defaultValue={props.defaultMins}\n            value={props.mins}\n            onSubmit={val => {\n              props.setMins(parseInt(val, 10));\n              validateMins(props.mins, props.setMins, props.maxVal, toast);\n              if (!isInputValid(val)) {\n                props.setMins(props.defaultMins);\n              }\n            }}\n            onChange={val => {\n              props.setMins(val);\n            }}>\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n        </Square>\n        <Spacer />\n        <Square\n          size=\"40px\"\n          {...props.theme.styles.bg}\n          rounded=\"md\"\n          fontSize=\"lg\"\n          as={Button}\n          onClick={() => {\n            validateMins(props.mins, props.setMins, props.maxVal, toast);\n            if (props.mins > 1) {\n              props.setMins(props.mins - 1);\n            } else {\n              toast({\n                title: 'Error',\n                description: 'Minutes cannot be less than 1',\n                status: 'error',\n                duration: 1000,\n                isClosable: true\n              });\n            }\n          }}>\n          <MinusIcon />\n        </Square>\n        <Spacer />\n      </Flex>\n    </Container>\n  );\n}\n\nexport default MinSetter;\n","import { Flex, useColorMode } from '@chakra-ui/react';\nimport React from 'react';\nimport MinSetter from './MinSetter';\n\nfunction TimerEditMode(props) {\n  const { colorMode } = useColorMode();\n\n  return (\n    <Flex\n      height=\"100%\"\n      color={colorMode === 'light' ? 'black' : 'white'}\n      justifyContent=\"center\"\n      alignItems=\"center\">\n      <MinSetter\n        theme={props.theme}\n        title=\"Session\"\n        defaultMins={25}\n        mins={props.sessionMins}\n        maxVal={props.maxSessionMins}\n        setMins={props.setSessionMins}\n      />\n\n      <MinSetter\n        theme={props.theme}\n        title=\"Break\"\n        defaultMins={10}\n        mins={props.breakMins}\n        maxVal={props.maxBreakMins}\n        setMins={props.setBreakMins}\n      />\n    </Flex>\n  );\n}\n\nexport default TimerEditMode;\n","import { Box, Button, Center, Flex } from '@chakra-ui/react';\nimport React, { useState, useEffect } from 'react';\nimport { SESSION } from '../../Constants/modes';\nimport RunningTimer from './RunningTimer';\nimport TimerEditMode from './TimerEditMode';\n\nfunction Timer(props) {\n  const [sessionMins, setSessionMins] = useState(25);\n  const [breakMins, setBreakMins] = useState(10);\n  const [started, setStarted] = useState(false);\n  const [mode, setMode] = useState(SESSION);\n  const [isRunning, setIsRunning] = useState(true);\n\n  let displayedTimer;\n\n  // useEffect to parse local storage and load started value on refresh\n  useEffect(() => {\n    const timerProp = JSON.parse(localStorage.getItem('timerProps'));\n    if (timerProp) {\n      setStarted(timerProp.started);\n      setIsRunning(false);\n      setMode(timerProp.mode);\n    }\n  }, []);\n\n  // useEffect to save Mode to local storage\n  useEffect(() => {\n    const timerProp = JSON.parse(localStorage.getItem('timerProps'));\n    if (timerProp) {\n      timerProp.started = started;\n      window.localStorage.setItem('timerProps', JSON.stringify(timerProp));\n    }\n  }, [started]);\n\n  if (started) {\n    displayedTimer = (\n      <RunningTimer\n        theme={props.theme}\n        mode={mode}\n        sessionMins={sessionMins}\n        setMode={setMode}\n        started={started}\n        setStarted={setStarted}\n        isRunning={isRunning}\n        setIsRunning={setIsRunning}\n        breakMins={breakMins}\n      />\n    );\n  } else {\n    displayedTimer = (\n      <TimerEditMode\n        theme={props.theme}\n        sessionMins={sessionMins}\n        setSessionMins={setSessionMins}\n        maxSessionMins={60}\n        breakMins={breakMins}\n        setBreakMins={setBreakMins}\n        maxBreakMins={60}\n      />\n    );\n  }\n\n  return (\n    <Box\n      w=\"90%\"\n      minH=\"40vh\"\n      rounded=\"xl\"\n      boxShadow=\"dark-lg\"\n      p=\"2\"\n      {...(props.theme.bgImage ? props.theme.styles.imageModeContrastBg : {})}>\n      <Flex\n        minH=\"40vh\"\n        h=\"100%\"\n        justify=\"center\"\n        align=\"center\"\n        flexDir=\"column\">\n        <Center>{displayedTimer}</Center>\n        <Flex m=\"4\" justify=\"center\" align=\"center\">\n          <Center m=\"20px\">\n            <Button\n              {...props.theme.styles.bg}\n              onClick={() => {\n                setStarted(!started);\n                setIsRunning(true);\n              }}>\n              {started ? 'STOP' : 'START'}\n            </Button>\n          </Center>\n\n          {started ? (\n            <Center>\n              <Button\n                {...props.theme.styles.bg}\n                onClick={() => setIsRunning(!isRunning)}>\n                {isRunning ? 'PAUSE' : 'RESUME'}\n              </Button>\n            </Center>\n          ) : (\n            <div />\n          )}\n        </Flex>\n      </Flex>\n    </Box>\n  );\n}\n\nexport default Timer;\n","import { React, useEffect, useState } from 'react';\nimport './App.css';\nimport { Box, Container, useColorMode } from '@chakra-ui/react';\nimport 'focus-visible/dist/focus-visible';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport Timer from './components/Timer';\nimport { generateGradientTheme, PURPLE } from './Constants/themes';\n\nfunction App() {\n  const { colorMode } = useColorMode();\n  const [timerTheme, setTimerTheme] = useState(\n    localStorage.getItem('timer-theme')\n      ? JSON.parse(localStorage.getItem('timer-theme'))\n      : generateGradientTheme(PURPLE, colorMode)\n  );\n\n  useEffect(() => {\n    const storedTheme = JSON.parse(localStorage.getItem('timer-theme'));\n    if (storedTheme) {\n      setTimerTheme(\n        generateGradientTheme(timerTheme.color, colorMode, {\n          image: storedTheme.bgImage,\n          random: storedTheme.bgInfo.random,\n          custom_url: storedTheme.bgInfo.custom_url\n        })\n      );\n    }\n  }, [colorMode, timerTheme.color]);\n  Notification.requestPermission();\n\n  const content = (\n    <Container centerContent>\n      <Header theme={timerTheme} setTheme={setTimerTheme} />\n      <Timer theme={timerTheme} />\n      <Tasks theme={timerTheme} />\n    </Container>\n  );\n\n  const noBgImage = (\n    <Box\n      width=\"100vw\"\n      height=\"maxContent\"\n      overflow=\"hidden\"\n      minH=\"100vh\"\n      bgGradient={\n        colorMode === 'light'\n          ? 'linear(to-bl, #F5F5F5, #FFFFFF)'\n          : 'linear(to-bl, #121417, #2B2E36)'\n      }>\n      {content}\n    </Box>\n  );\n\n  const withBgRandomImage = (\n    <Box\n      width=\"100vw\"\n      minH=\"100vh\"\n      _before={{\n        bgImage: `url('${timerTheme.bgInfo.random_url}')`,\n        bgAttachment: 'fixed',\n        bgSize: 'cover',\n        bgRepeat: 'no-repeat',\n        height: '100%',\n        left: 0,\n        position: 'fixed',\n        top: 0,\n        width: '100%',\n        willChange: 'transform',\n        content: \"''\",\n        zIndex: -1\n      }}>\n      {content}\n    </Box>\n  );\n\n  const withBgCustomImage = (\n    <Box\n      width=\"100vw\"\n      height=\"maxContent\"\n      minH=\"100vh\"\n      _before={{\n        bgImage: `url('${timerTheme.bgInfo.custom_url}')`,\n        bgAttachment: 'fixed',\n        bgSize: 'cover',\n        bgRepeat: 'no-repeat',\n        height: '100%',\n        left: 0,\n        position: 'fixed',\n        top: 0,\n        width: '100%',\n        willChange: 'transform',\n        content: \"''\",\n        zIndex: -1\n      }}>\n      {content}\n    </Box>\n  );\n  let displayedTimer = <div />;\n\n  if (timerTheme.bgImage) {\n    if (timerTheme.bgInfo.random) {\n      displayedTimer = withBgRandomImage;\n    } else {\n      displayedTimer = withBgCustomImage;\n    }\n  } else {\n    displayedTimer = noBgImage;\n  }\n  return displayedTimer;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, CSSReset, extendTheme } from '@chakra-ui/react';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false\n};\n\nconst theme = extendTheme({ config });\n\nReactDOM.render(\n  <React.StrictMode>\n    <CSSReset />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}